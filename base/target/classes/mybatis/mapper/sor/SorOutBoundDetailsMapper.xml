<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jxh.sor.mapper.SorOutBoundDetailsMapper">
  <resultMap id="BaseResultMap" type="com.jxh.sor.entity.SorOutBoundDetails">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="pid" jdbcType="VARCHAR" property="pid" />
    <result column="package_id" jdbcType="VARCHAR" property="packageId" />
    <result column="weight" jdbcType="DOUBLE" property="weight" />
    <result column="volume" jdbcType="DOUBLE" property="volume" />
    <result column="scan_date" jdbcType="TIMESTAMP" property="scanDate" />
    <result column="is_scan" jdbcType="BIT" property="isScan" />
    <result column="is_next_storage" jdbcType="BIT" property="isNextStorage" />
    <result column="is_double_storage" jdbcType="BIT" property="isDoubleStorage" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, pid, package_id, weight, volume, scan_date, is_scan, is_next_storage, is_double_storage
  </sql>
  <select id="selectByExample" parameterType="com.jxh.sor.entity.SorOutBoundDetailsExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from sor_out_bound_details
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from sor_out_bound_details
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from sor_out_bound_details
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.jxh.sor.entity.SorOutBoundDetailsExample">
    delete from sor_out_bound_details
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.jxh.sor.entity.SorOutBoundDetails">
    insert into sor_out_bound_details (id, pid, package_id, 
      weight, volume, scan_date, 
      is_scan, is_next_storage, is_double_storage
      )
    values (#{id,jdbcType=VARCHAR}, #{pid,jdbcType=VARCHAR}, #{packageId,jdbcType=VARCHAR}, 
      #{weight,jdbcType=DOUBLE}, #{volume,jdbcType=DOUBLE}, #{scanDate,jdbcType=TIMESTAMP}, 
      #{isScan,jdbcType=BIT}, #{isNextStorage,jdbcType=BIT}, #{isDoubleStorage,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.jxh.sor.entity.SorOutBoundDetails">
    insert into sor_out_bound_details
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="pid != null">
        pid,
      </if>
      <if test="packageId != null">
        package_id,
      </if>
      <if test="weight != null">
        weight,
      </if>
      <if test="volume != null">
        volume,
      </if>
      <if test="scanDate != null">
        scan_date,
      </if>
      <if test="isScan != null">
        is_scan,
      </if>
      <if test="isNextStorage != null">
        is_next_storage,
      </if>
      <if test="isDoubleStorage != null">
        is_double_storage,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=VARCHAR},
      </if>
      <if test="packageId != null">
        #{packageId,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        #{weight,jdbcType=DOUBLE},
      </if>
      <if test="volume != null">
        #{volume,jdbcType=DOUBLE},
      </if>
      <if test="scanDate != null">
        #{scanDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isScan != null">
        #{isScan,jdbcType=BIT},
      </if>
      <if test="isNextStorage != null">
        #{isNextStorage,jdbcType=BIT},
      </if>
      <if test="isDoubleStorage != null">
        #{isDoubleStorage,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.jxh.sor.entity.SorOutBoundDetailsExample" resultType="java.lang.Long">
    select count(*) from sor_out_bound_details
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update sor_out_bound_details
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.pid != null">
        pid = #{record.pid,jdbcType=VARCHAR},
      </if>
      <if test="record.packageId != null">
        package_id = #{record.packageId,jdbcType=VARCHAR},
      </if>
      <if test="record.weight != null">
        weight = #{record.weight,jdbcType=DOUBLE},
      </if>
      <if test="record.volume != null">
        volume = #{record.volume,jdbcType=DOUBLE},
      </if>
      <if test="record.scanDate != null">
        scan_date = #{record.scanDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isScan != null">
        is_scan = #{record.isScan,jdbcType=BIT},
      </if>
      <if test="record.isNextStorage != null">
        is_next_storage = #{record.isNextStorage,jdbcType=BIT},
      </if>
      <if test="record.isDoubleStorage != null">
        is_double_storage = #{record.isDoubleStorage,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update sor_out_bound_details
    set id = #{record.id,jdbcType=VARCHAR},
      pid = #{record.pid,jdbcType=VARCHAR},
      package_id = #{record.packageId,jdbcType=VARCHAR},
      weight = #{record.weight,jdbcType=DOUBLE},
      volume = #{record.volume,jdbcType=DOUBLE},
      scan_date = #{record.scanDate,jdbcType=TIMESTAMP},
      is_scan = #{record.isScan,jdbcType=BIT},
      is_next_storage = #{record.isNextStorage,jdbcType=BIT},
      is_double_storage = #{record.isDoubleStorage,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.jxh.sor.entity.SorOutBoundDetails">
    update sor_out_bound_details
    <set>
      <if test="pid != null">
        pid = #{pid,jdbcType=VARCHAR},
      </if>
      <if test="packageId != null">
        package_id = #{packageId,jdbcType=VARCHAR},
      </if>
      <if test="weight != null">
        weight = #{weight,jdbcType=DOUBLE},
      </if>
      <if test="volume != null">
        volume = #{volume,jdbcType=DOUBLE},
      </if>
      <if test="scanDate != null">
        scan_date = #{scanDate,jdbcType=TIMESTAMP},
      </if>
      <if test="isScan != null">
        is_scan = #{isScan,jdbcType=BIT},
      </if>
      <if test="isNextStorage != null">
        is_next_storage = #{isNextStorage,jdbcType=BIT},
      </if>
      <if test="isDoubleStorage != null">
        is_double_storage = #{isDoubleStorage,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.jxh.sor.entity.SorOutBoundDetails">
    update sor_out_bound_details
    set pid = #{pid,jdbcType=VARCHAR},
      package_id = #{packageId,jdbcType=VARCHAR},
      weight = #{weight,jdbcType=DOUBLE},
      volume = #{volume,jdbcType=DOUBLE},
      scan_date = #{scanDate,jdbcType=TIMESTAMP},
      is_scan = #{isScan,jdbcType=BIT},
      is_next_storage = #{isNextStorage,jdbcType=BIT},
      is_double_storage = #{isDoubleStorage,jdbcType=BIT}
    where id = #{id,jdbcType=VARCHAR}
  </update>

  <select id="maxId" resultType="string">
    select max(id) from sor_out_bound_details
  </select>
</mapper>